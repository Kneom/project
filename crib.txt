
// let canvas;
// let context;
// let request_id;

// let fpsInterval = 1000 / 30; 
// let now;
// let then = Date.now();

// let asteroids = [];

// let xhttp;
// let score = 0;


// let player = {
//   x : 0,
//   y : 150,
//   width : 32,
//   height : 48,
//   frameX : 0,
//   frameY : 0,
//   xChange : 0,
//   yChange : 0,
//   in_air : false
// }

// let moveLeft = false;
// let moveUp = false;
// let moveRight = false;
// let moveDown = false;


// let floor;
// let playerImage = new Image()
// let backgroundImage = new Image()
// let tilesPerRow = 6;
// let tileSize = 16;

// let background =  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
//                   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
//                   [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]

// document.addEventListener("DOMContentLoaded", init, false);


// function init() {
//   canvas = document.querySelector("canvas");
//   context = canvas.getContext("2d");


//   player.x = canvas.width /2;
//   player.y = canvas.height /2;


//   window.addEventListener("keydown", activate, false);
//   window.addEventListener("keyup", deactivate, false);
//   load_assests([
//     {"var": playerImage, "url": "sprite.png"},
//   ], draw);
// }

// function draw() {
//   window.requestAnimationFrame(draw);
//   let now = Date.now();
//   let elapsed = now - then;
//   if (elapsed <= fpsInterval) {
//     return;
//   }
//   then = now - (elapsed % fpsInterval);

//   if (asteroids.length < 10) {
//     let a = {
//       x: canvas.width,
//       y: randint(0, canvas.height),
//       size: randint(5, 15),
//       xChange: randint(-10, -1),
//       yChange: 0,
//     };
//     asteroids.push(a);
//   }
//   context.clearRect(0, 0, canvas.width, canvas.height);

//   context.fillStyle = "yellow";

//   for (let a of asteroids) {
//     context.fillRect(a.x, a.y, a.size, a.size);
//   }
//   context.fillStyle = "green";
//   context.fillRect(player.x, player.y, player.size, player.size);

//   if (player.x + player.size >= canvas.width) {
//     stop("YOU WIN!");
//     return;
//   }

//   for (let a of asteroids) {
//     if (player_collides(a)) {
//       stop("YOU LOSE!");
//       return;
//     }
//   }
//   for (let a of asteroids) {
//     if (a.x + a.size < 0) {
//       a.x = canvas.width;
//       a.y = randint(0, canvas.height);
//     } else {
//       a.x += a.xChange;
//       a.y += a.yChange;
//     }
//   }

//   if (moveRight) {
//     // same as moveRight === true
//     player.x += player.size;
//   }
//   if (moveUp) {
//     player.y -= player.size;
//   }
//   if (moveDown) {
//     player.y += player.size;
//   }

//   score += 1;
//   if (player.x + player.width < 0){
//     play.x = canvas.width; 
//   } else if (player.x > canvas.width) {
//     player.x = -player.width;
//   }
// }

// function activate(event) {
//   let key = event.key;
//   if (key === "ArrowLeft") {
//     moveLeft = true;
//   } else if (key === "ArrowUp") {
//     moveUp = true;
//   } else if (key === "ArrowDown") {
//     moveDown = true;
//   } else if (key === "ArrowRight") {
//     moveRight = true;
//   }
// }
// function deactivate(event) {
//   let key = event.key;
//   if (key === "ArrowLeft") {
//     moveLeft = false;
//   } else if (key === "ArrowUp") {
//     moveUp = false;
//   } else if (key === "ArrowDown") {
//     moveDown = false;
//   } else if (key === "ArrowRight") {
//     moveRight = false;
//   }
// }


// }

// function randint(min, max) {
//   return Math.round(Math.random() * (max - min)) + min;
// }

// function player_collides(a) {
//   if (
//     player.x + player.size < a.x ||
//     a.x + a.size < player.x ||
//     player.y > a.y + a.size ||
//     a.y > player.y + player.size
//   ) {
//     return false;
//   } else {
//     return true;
//   }
// }

// function stop(outcome) {
//   window.removeEventListener("keydown", activate, false);
//   window.cancelAnimationFrame("keyup", deactivate, false);
//   window.cancelAnimationFrame(request_id);
//   let outcome_element = document.querySelector("#outcome");
//   outcome_element.innerHTML = outcome + " Score " + score;
//   let data = new FormData();
//   data.append("score", score);
//   xhttp = new XMLHttpRequest();
//   xhttp.addEventListener("readystatechange", handle_response, false);
//   xhttp.open("POST", "/store_score", true);
//   xhttp.send(data);
// }

// function handle_response(){
//   if (xhttp.readyState === 4){
//     // check response has fully arrived
//     if (xhttp.status === 200){
//       if (xhttp.responseText === "succes"){
//         console.log("yes")
//       } else{
//         console.log("No")
//       }
//     }
//   }
// }

// function load_assets(assets,callback){
//   let num_assests = assets.length;
//   let loaded = function() {
//     console.log("loaded");
//     num_assets = num_assets -1;
//     if (num_assets === 0){
//       callback();
//     }
//   };
//   for (let assest of assets) {
//     let element = asset.var;
//     if ( element instanceof HTMLImageELement ){
//       console.log("img");
//       element.addEventListener("load",loaded. false);
//     } else if ( element instanceof HTMLAudioElement) {
//       console.log("audio");
//       element.addEventListener("canplaythrough", loaded, false);
//     }
//     element.src = asset.url;
//   }
// }